{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TorQ Crypto TorQ-Crypto provides an example of how an application can be built and deployed on top of the TorQ framework. This package behaves in a similar manner to the Finance Starter Pack with the main difference being that TorQ-Crypto collects and stores real time data. To avoid duplicated documentation TorQ and the Finance Starter pack are linked below: TorQ Manual Finance Starter Pack TorQ-Crypto includes: Fullly configurable subscriptions to 5 cryptocurrency exchanges Collection and storage of real time level 2 order book data Custom API functions for data analysis Once started, this package will collect cryptocurrency data and and push it into an in-memory real-time database. It will persist this data to disk every day at midnight. The system will operate 24*7 and is highly customisable. email: support@aquaq.co.uk web: www.aquaq.co.uk","title":"Home"},{"location":"#torq-crypto","text":"TorQ-Crypto provides an example of how an application can be built and deployed on top of the TorQ framework. This package behaves in a similar manner to the Finance Starter Pack with the main difference being that TorQ-Crypto collects and stores real time data. To avoid duplicated documentation TorQ and the Finance Starter pack are linked below: TorQ Manual Finance Starter Pack TorQ-Crypto includes: Fullly configurable subscriptions to 5 cryptocurrency exchanges Collection and storage of real time level 2 order book data Custom API functions for data analysis Once started, this package will collect cryptocurrency data and and push it into an in-memory real-time database. It will persist this data to disk every day at midnight. The system will operate 24*7 and is highly customisable. email: support@aquaq.co.uk web: www.aquaq.co.uk","title":"TorQ Crypto"},{"location":"configuration/","text":"TorQ-Crpyto Configuration Frequency and Limit The frequency at which each feed queries their respective Cryptocurrency exchange is fully configurable along with the request limit. We have availed of the default settings file appconfig/settings/default.q to set a frequency of 30 seconds and a limit of 10 across all exchanges. \\d .crypto deffreq : 0D00:00:30.000 deflimit: \"10\" In the individual settings files for each exchange we have set the frequency and limit to the default values. However these can be changed on a per exchange basis. In the example below from appconfig/settings/huobifeed.q the huboi feed will query its respective API every 30 seconds retrieving a maximum for 10 quotes for its subscribed symbols. \\d .huobi limit: .crypto.deflimit freq:.crypto.deffreq Symbol Configuration Symbol subscription is specified on a per exchange in appconfig/symconfig.csv. In this file we have included 15 symbols which are common across the 5 exchanges, but by default only Bitcoin and Ethereum are subscribed to. This symbol configuration has a dependency on appconfig/symap.csv which maps tickers across exchanges to one common identifier. Therefore if a new Cryptocurrency is to be added both of these files must be taken into consideration.","title":"Configuration"},{"location":"configuration/#torq-crpyto-configuration","text":"","title":"TorQ-Crpyto Configuration"},{"location":"configuration/#frequency-and-limit","text":"The frequency at which each feed queries their respective Cryptocurrency exchange is fully configurable along with the request limit. We have availed of the default settings file appconfig/settings/default.q to set a frequency of 30 seconds and a limit of 10 across all exchanges. \\d .crypto deffreq : 0D00:00:30.000 deflimit: \"10\" In the individual settings files for each exchange we have set the frequency and limit to the default values. However these can be changed on a per exchange basis. In the example below from appconfig/settings/huobifeed.q the huboi feed will query its respective API every 30 seconds retrieving a maximum for 10 quotes for its subscribed symbols. \\d .huobi limit: .crypto.deflimit freq:.crypto.deffreq","title":"Frequency and Limit"},{"location":"configuration/#symbol-configuration","text":"Symbol subscription is specified on a per exchange in appconfig/symconfig.csv. In this file we have included 15 symbols which are common across the 5 exchanges, but by default only Bitcoin and Ethereum are subscribed to. This symbol configuration has a dependency on appconfig/symap.csv which maps tickers across exchanges to one common identifier. Therefore if a new Cryptocurrency is to be added both of these files must be taken into consideration.","title":"Symbol Configuration"},{"location":"data/","text":"Data Capture Feed Handlers The feed handler processes collect real time cryptocurrency data though RESTful APIs. We have added 5 feeds which collect data from the following exchanges: OKEX DigiFinex Huobi ZB Blue Helix Each feed collects level 2 order book data for its subscribed symbols at a set frequency and limit which is discussed here . After converting the JSON response to a KDB table the following standardisation occurs before the data is sent to the ticker plant: Conversion of times to KDB timestamps Quotes arranged in order of best to worst Duplicated data will not be sent (i.e quotes that have not changed from last publish) This diagram summarises the data capture: Tables Each feed publishes data to three tables in the RDB - exchange, exchange_top and a table specific to its own feed. The exchange table contains a superset of L2 data collected from all exchanges with exchange_top containing only top-of-book data. It is these exchange table which are used in the inbuilt functions to compare quotes across exchanges and over time. meta exchange c | t f a ------------| ----- time | p sym | s g exchangeTime| p exchange | s bid | F bidSize | F ask | F askSize | F meta exchange_top c | t f a ------------| ----- time | p sym | s g exchangeTime| p exchange | s bid | f bidSize | f ask | f askSize | f Additional Information: The HTTP requests that the feed processes send do not have a time out and it is possible for these requests to fail on the exchange side for myriad of reasons. In such cases a small gap may be seen in the data, typically this will not be more than a few minutes.","title":"Data Capture"},{"location":"data/#data-capture","text":"","title":"Data Capture"},{"location":"data/#feed-handlers","text":"The feed handler processes collect real time cryptocurrency data though RESTful APIs. We have added 5 feeds which collect data from the following exchanges: OKEX DigiFinex Huobi ZB Blue Helix Each feed collects level 2 order book data for its subscribed symbols at a set frequency and limit which is discussed here . After converting the JSON response to a KDB table the following standardisation occurs before the data is sent to the ticker plant: Conversion of times to KDB timestamps Quotes arranged in order of best to worst Duplicated data will not be sent (i.e quotes that have not changed from last publish) This diagram summarises the data capture:","title":"Feed Handlers"},{"location":"data/#tables","text":"Each feed publishes data to three tables in the RDB - exchange, exchange_top and a table specific to its own feed. The exchange table contains a superset of L2 data collected from all exchanges with exchange_top containing only top-of-book data. It is these exchange table which are used in the inbuilt functions to compare quotes across exchanges and over time. meta exchange c | t f a ------------| ----- time | p sym | s g exchangeTime| p exchange | s bid | F bidSize | F ask | F askSize | F meta exchange_top c | t f a ------------| ----- time | p sym | s g exchangeTime| p exchange | s bid | f bidSize | f ask | f askSize | f","title":"Tables"},{"location":"data/#additional-information","text":"The HTTP requests that the feed processes send do not have a time out and it is possible for these requests to fail on the exchange side for myriad of reasons. In such cases a small gap may be seen in the data, typically this will not be more than a few minutes.","title":"Additional Information:"},{"location":"functions/","text":"TorQ-Crypto Gateway Functions We have created four functions that will help analyse data collected by the feeds. These functions are loaded into the RDB and HDB processes. OHLC Function Returns the OHLC quote data for specified dates with the option to break down by exchange. Keys Mandatory Types Defaults Example Description sym 1b -11 11h All syms `BTCUSDT`ETHUSDT Symbol(s) of interest date 0b -14 14h Most recent date 2020.03.29 Date(s) to query exchanges 0b -11 11h All exchanges `finex`zb Exchange(s) of interest quote 0b -11 11h Bid & Ask `bid Quote of interest byexchange 0b -1h 0b 1b Breakdown by exchange Example usage: Get BTCUSDT data broken down by exchange: q)ohlc[`date`sym`exchanges`quote`byexchange!(2020.03.29 2020.03.30;`BTCUSDT;`finex`okex`zb;`bid;1b)] date sym exchange| openBid closeBid bidHigh bidLow ---------------------------| -------------------------------- 2020.03.29 BTCUSDT finex | 6238.21 5893.46 6263.52 5870 2020.03.29 BTCUSDT okex | 6250.9 5883.4 6263.3 5871.5 2020.03.29 BTCUSDT zb | 6241.94 5881.93 6262.12 5879.52 2020.03.30 BTCUSDT finex | 5879.75 6388.6 6571.28 5864.36 2020.03.30 BTCUSDT okex | 5888.7 6393.9 6583.9 5860.5 2020.03.30 BTCUSDT zb | 5885.56 6387.76 6570.58 5861.52 Orderbook Function Returns level 2 orderbook at a specific point in time considering only quotes within the look-back window. Keys Mandatory Types Defaults Example Description sym 1b -11h N/A `BTCUSDT Symbol of interest exchanges 0b -11 11h All exchanges `finex`okex Exchange(s) of interest timestamp 0b -12h Last available time 2020.04.16D09:40:00.0000000 Time of orderbook window 0b -18h 2*.crypto.deffreq 00:00:30 Lookback window Example usage: Get BTCUSDT orderbook with a lookback window of 1 minute: q)orderbook[`sym`timestamp`exchanges`window!(`BTCUSDT;2020.03.29D15:00:00.000000000;`finex`okex`zb;00:01:00)] exchange_b bidSize bid ask askSize exchange_a ----------------------------------------------------------- okex 0.3764075 6146.5 6143.51 0.0002 zb okex 0.30097 6146.4 6144.19 0.0004 zb okex 0.19998 6146.2 6145.05 0.002 finex okex 0.07 6146.1 6145.1 0.0008 zb okex 0.39996 6146 6145.3 0.002 finex okex 0.001 6145.8 6145.6 0.0246 zb okex 1.5 6145.7 6146.51 0.096 zb okex 0.0011 6145.6 6146.6 0.001 okex okex 0.00433655 6145.5 6147.5 0.001 okex okex 0.59994 6145.4 6147.6 0.00607957 okex zb 0.188 6141.1 6147.67 0.133 zb zb 0.043 6140.62 6147.9 0.00650741 okex zb 0.047 6140.61 6147.92 0.1605 finex zb 0.037 6140.48 6148 0.07928215 okex finex 1.8368 6139.74 6148.1 0.1022373 okex zb 0.033 6138.37 6148.2 0.2075531 okex finex 0.1532 6138.24 6148.3 0.504 okex zb 1 6137.53 6148.4 0.5139502 okex Topofbook Function Returns top of book data on a per exchange basis at set buckets between two timestamps. Keys Mandatory Types Defaults Example Description sym 1b -11h N/A `BTCUSDT Symbol of interest exchanges 0b -11 11h All exchanges `finex Exchange(s) of interest starttime 0b -12h Last available date 2020.04.16D09:40:00.000000 Query start time endtime 0b -12h Last available date 2020.04.16D12:00:00.000000 Query end time bucket 0b -18h 2*.crypto.deffreq 00:02:00 Bucket intervals Example usage: Top of book data for ETHUSDT across zb and huobi exchanges: q)topofbook[`sym`exchanges`starttime`endtime!(`ETHUSDT;`zb`huobi;2020.03.29D15:00:00.000000000;2020.03.29D15:05:00.000000000)] exchangeTime zbBid zbAsk zbBidSize zbAskSize huobiBid huobiAsk huobiBidSize huobiAskSize ----------------------------------------------------------------------------------------------------------- 2020.03.29D15:01:00.000000000 129.37 129.42 1.43 0.002 129.3 129.4 30.6389 294.2774 2020.03.29D15:02:00.000000000 129.28 129.33 2.31 0.001 129.2 129.3 0.6546 714.6843 2020.03.29D15:03:00.000000000 129.25 129.34 1.77 0.024 129.1 129.2 127.2271 74.5471 2020.03.29D15:04:00.000000000 129.26 129.31 1.38 0.001 129.1 129.2 328.819 1 2020.03.29D15:05:00.000000000 129.16 129.22 2.13 0.001 129.1 129.2 25.2141 1081.714 Arbitrage Function Returns top of book with additional profit and arbitrage columns. Note that profit here is reflective of the exchanges with the greatest difference between bid and ask. When sizes are also taken into account it may be possible to find a more profitable opportunity. Keys Mandatory Types Defaults Example Description sym 1b -11h N/A `BTCUSDT Symbol of interest exchanges 0b -11 11h All exchanges `finex Exchange(s) of interest starttime 0b -12h Last available date 2020.04.16D09:40:00.000000 Query start time endtime 0b -12h Last available date 2020.04.16D12:00:00.000000 Query end time bucket 0b -18h 2*.crypto.deffreq 00:02:00 Bucket intervals Example usage: Top of book with arbitrage indicator for ETHUSDT across zb and huobi exchanges: q)arbitrage[`sym`exchanges`starttime`endtime!(`ETHUSDT;`zb`huobi;2020.03.29D15:00:00.000000000;2020.03.29D15:05:00.000000000)] exchangeTime zbBid zbAsk zbBidSize zbAskSize huobiBid huobiAsk huobiBidSize huobiAskSize profit arbitrage ---------------------------------------------------------------------------------------------------------------------------- 2020.03.29D15:01:00.000000000 129.37 129.42 1.43 0.002 129.3 129.4 30.6389 294.2774 0 0 2020.03.29D15:02:00.000000000 129.28 129.33 2.31 0.001 129.2 129.3 0.6546 714.6843 0 0 2020.03.29D15:03:00.000000000 129.25 129.34 1.77 0.024 129.1 129.2 127.2271 74.5471 0.0885 1 2020.03.29D15:04:00.000000000 129.26 129.31 1.38 0.001 129.1 129.2 328.819 1 0.06 1 2020.03.29D15:05:00.000000000 129.16 129.22 2.13 0.001 129.1 129.2 25.2141 1081.714 0 0 Additional Information: It is important to note that these functions do not account for: Exchange fees Transaction costs Request latency","title":"Functions"},{"location":"functions/#torq-crypto-gateway-functions","text":"We have created four functions that will help analyse data collected by the feeds. These functions are loaded into the RDB and HDB processes.","title":"TorQ-Crypto Gateway Functions"},{"location":"functions/#ohlc-function","text":"Returns the OHLC quote data for specified dates with the option to break down by exchange. Keys Mandatory Types Defaults Example Description sym 1b -11 11h All syms `BTCUSDT`ETHUSDT Symbol(s) of interest date 0b -14 14h Most recent date 2020.03.29 Date(s) to query exchanges 0b -11 11h All exchanges `finex`zb Exchange(s) of interest quote 0b -11 11h Bid & Ask `bid Quote of interest byexchange 0b -1h 0b 1b Breakdown by exchange","title":"OHLC Function"},{"location":"functions/#example-usage","text":"Get BTCUSDT data broken down by exchange: q)ohlc[`date`sym`exchanges`quote`byexchange!(2020.03.29 2020.03.30;`BTCUSDT;`finex`okex`zb;`bid;1b)] date sym exchange| openBid closeBid bidHigh bidLow ---------------------------| -------------------------------- 2020.03.29 BTCUSDT finex | 6238.21 5893.46 6263.52 5870 2020.03.29 BTCUSDT okex | 6250.9 5883.4 6263.3 5871.5 2020.03.29 BTCUSDT zb | 6241.94 5881.93 6262.12 5879.52 2020.03.30 BTCUSDT finex | 5879.75 6388.6 6571.28 5864.36 2020.03.30 BTCUSDT okex | 5888.7 6393.9 6583.9 5860.5 2020.03.30 BTCUSDT zb | 5885.56 6387.76 6570.58 5861.52","title":"Example usage:"},{"location":"functions/#orderbook-function","text":"Returns level 2 orderbook at a specific point in time considering only quotes within the look-back window. Keys Mandatory Types Defaults Example Description sym 1b -11h N/A `BTCUSDT Symbol of interest exchanges 0b -11 11h All exchanges `finex`okex Exchange(s) of interest timestamp 0b -12h Last available time 2020.04.16D09:40:00.0000000 Time of orderbook window 0b -18h 2*.crypto.deffreq 00:00:30 Lookback window","title":"Orderbook Function"},{"location":"functions/#example-usage_1","text":"Get BTCUSDT orderbook with a lookback window of 1 minute: q)orderbook[`sym`timestamp`exchanges`window!(`BTCUSDT;2020.03.29D15:00:00.000000000;`finex`okex`zb;00:01:00)] exchange_b bidSize bid ask askSize exchange_a ----------------------------------------------------------- okex 0.3764075 6146.5 6143.51 0.0002 zb okex 0.30097 6146.4 6144.19 0.0004 zb okex 0.19998 6146.2 6145.05 0.002 finex okex 0.07 6146.1 6145.1 0.0008 zb okex 0.39996 6146 6145.3 0.002 finex okex 0.001 6145.8 6145.6 0.0246 zb okex 1.5 6145.7 6146.51 0.096 zb okex 0.0011 6145.6 6146.6 0.001 okex okex 0.00433655 6145.5 6147.5 0.001 okex okex 0.59994 6145.4 6147.6 0.00607957 okex zb 0.188 6141.1 6147.67 0.133 zb zb 0.043 6140.62 6147.9 0.00650741 okex zb 0.047 6140.61 6147.92 0.1605 finex zb 0.037 6140.48 6148 0.07928215 okex finex 1.8368 6139.74 6148.1 0.1022373 okex zb 0.033 6138.37 6148.2 0.2075531 okex finex 0.1532 6138.24 6148.3 0.504 okex zb 1 6137.53 6148.4 0.5139502 okex","title":"Example usage:"},{"location":"functions/#topofbook-function","text":"Returns top of book data on a per exchange basis at set buckets between two timestamps. Keys Mandatory Types Defaults Example Description sym 1b -11h N/A `BTCUSDT Symbol of interest exchanges 0b -11 11h All exchanges `finex Exchange(s) of interest starttime 0b -12h Last available date 2020.04.16D09:40:00.000000 Query start time endtime 0b -12h Last available date 2020.04.16D12:00:00.000000 Query end time bucket 0b -18h 2*.crypto.deffreq 00:02:00 Bucket intervals","title":"Topofbook Function"},{"location":"functions/#example-usage_2","text":"Top of book data for ETHUSDT across zb and huobi exchanges: q)topofbook[`sym`exchanges`starttime`endtime!(`ETHUSDT;`zb`huobi;2020.03.29D15:00:00.000000000;2020.03.29D15:05:00.000000000)] exchangeTime zbBid zbAsk zbBidSize zbAskSize huobiBid huobiAsk huobiBidSize huobiAskSize ----------------------------------------------------------------------------------------------------------- 2020.03.29D15:01:00.000000000 129.37 129.42 1.43 0.002 129.3 129.4 30.6389 294.2774 2020.03.29D15:02:00.000000000 129.28 129.33 2.31 0.001 129.2 129.3 0.6546 714.6843 2020.03.29D15:03:00.000000000 129.25 129.34 1.77 0.024 129.1 129.2 127.2271 74.5471 2020.03.29D15:04:00.000000000 129.26 129.31 1.38 0.001 129.1 129.2 328.819 1 2020.03.29D15:05:00.000000000 129.16 129.22 2.13 0.001 129.1 129.2 25.2141 1081.714","title":"Example usage:"},{"location":"functions/#arbitrage-function","text":"Returns top of book with additional profit and arbitrage columns. Note that profit here is reflective of the exchanges with the greatest difference between bid and ask. When sizes are also taken into account it may be possible to find a more profitable opportunity. Keys Mandatory Types Defaults Example Description sym 1b -11h N/A `BTCUSDT Symbol of interest exchanges 0b -11 11h All exchanges `finex Exchange(s) of interest starttime 0b -12h Last available date 2020.04.16D09:40:00.000000 Query start time endtime 0b -12h Last available date 2020.04.16D12:00:00.000000 Query end time bucket 0b -18h 2*.crypto.deffreq 00:02:00 Bucket intervals","title":"Arbitrage Function"},{"location":"functions/#example-usage_3","text":"Top of book with arbitrage indicator for ETHUSDT across zb and huobi exchanges: q)arbitrage[`sym`exchanges`starttime`endtime!(`ETHUSDT;`zb`huobi;2020.03.29D15:00:00.000000000;2020.03.29D15:05:00.000000000)] exchangeTime zbBid zbAsk zbBidSize zbAskSize huobiBid huobiAsk huobiBidSize huobiAskSize profit arbitrage ---------------------------------------------------------------------------------------------------------------------------- 2020.03.29D15:01:00.000000000 129.37 129.42 1.43 0.002 129.3 129.4 30.6389 294.2774 0 0 2020.03.29D15:02:00.000000000 129.28 129.33 2.31 0.001 129.2 129.3 0.6546 714.6843 0 0 2020.03.29D15:03:00.000000000 129.25 129.34 1.77 0.024 129.1 129.2 127.2271 74.5471 0.0885 1 2020.03.29D15:04:00.000000000 129.26 129.31 1.38 0.001 129.1 129.2 328.819 1 0.06 1 2020.03.29D15:05:00.000000000 129.16 129.22 2.13 0.001 129.1 129.2 25.2141 1081.714 0 0","title":"Example usage:"},{"location":"functions/#additional-information","text":"It is important to note that these functions do not account for: Exchange fees Transaction costs Request latency","title":"Additional Information:"},{"location":"gateway/","text":"Gateway We recommend executing the previously discussed database functions through the gateway processes to avail of query routing and load balancing. Full gateway functionality is discussed here . To use, connect to the gateway from q process, qcon or from an IDE. An example is shown below running from an IDE. Example queries are listed below. // OHLC .gw.syncexec[(`ohlc;`date`sym`byexchange!(2020.03.29 2020.03.30;`ETHUSDT;1b));`hdb] .gw.syncexec[\"ohlc[`date`sym`byexchange!(2020.03.29 2020.03.30;`ETHUSDT;1b)]\";`hdb] .gw.syncexec[\"ohlc[`exchanges`sym`byexchange!(`okex`huobi`finex;`ETHUSDT`BTCUSDT;1b)]\";`rdb] .gw.syncexec[\"ohlc[`exchanges`sym`byexchange`quote!(`okex`huobi`finex;`ETHUSDT`BTCUSDT;1b;`bid)]\";`hdb] .gw.syncexec[\"ohlc[`date`sym`exchanges`quote!(2020.05.09 2020.03.29 2020.03.30;`BTCUSDT;`;`ask)]\";`hdb`rdb] .gw.syncexec[\"ohlc[`date`sym`exchanges`quote`byexchange!(2020.05.09 2020.03.29 2020.03.30;`BTCUSDT;`finex`okex`zb;`bid;1b)]\";`hdb`rdb] // Orderbook .gw.syncexec[\"orderbook[`sym`exchanges!(`ETHUSDT;`)]\";`rdb] .gw.syncexec[\"orderbook[`sym`timestamp!(`BTCUSDT;2020.03.29D14:30:00.000000000)]\";`hdb] .gw.syncexec[\"orderbook[`sym`timestamp!(`ETHUSDT;2020.05.09D10:30:00.000000000)]\";`rdb] .gw.syncexec[\"orderbook[`sym`timestamp`exchanges`window!(`ETHUSDT;2020.03.29D15:00:00.000000000;`huobi`bhex;00:02:00)]\";`hdb] .gw.syncexec[\"orderbook[`sym`timestamp`exchanges`window!(`BTCUSDT;2020.03.29D15:00:00.000000000;`finex`okex`zb;00:01:00)]\";`hdb] // Top of Book .gw.syncexec[\"topofbook[`sym`exchanges!(`ETHUSDT;`)]\";`rdb] .gw.syncexec[\"topofbook[`sym`starttime`bucket!(`BTCUSDT;2020.05.09D10:00:00;00:05:00)]\";`rdb] .gw.syncexec[\"topofbook[`sym`starttime`endtime!(`BTCUSDT;2020.03.29D14:00:00;2020.03.29D17:00:00)]\";`hdb] .gw.syncexec[\"topofbook[`sym`exchanges`starttime`endtime!(`ETHUSDT;`zb`huobi;2020.03.29D15:00:00;2020.03.29D15:05:00)]\";`hdb] .gw.syncexec[\"topofbook[`sym`exchanges`starttime`endtime`bucket!(`ETHUSDT;`okex`finex`zb;2020.03.28D10:00:00;2020.03.29D12:00:00;00:05:00)]\";`hdb] // Arbitrage .gw.syncexec[\"arbitrage[`sym`exchanges!(`ETHUSDT;`)]\";`rdb] .gw.syncexec[\"arbitrage[`sym`starttime`bucket!(`BTCUSDT;2020.05.09D10:00:00;00:05:00)]\";`rdb] .gw.syncexec[\"arbitrage[`sym`starttime`endtime!(`BTCUSDT;2020.03.29D14:00:00;2020.03.29D17:00:00)]\";`hdb] .gw.syncexec[\"arbitrage[`sym`exchanges`starttime`endtime!(`ETHUSDT;`zb`huobi;2020.03.29D15:00:00;2020.03.29D15:05:00)]\";`hdb] .gw.syncexec[\"arbitrage[`sym`exchanges`starttime`endtime`bucket!(`ETHUSDT;`okex`finex`zb;2020.03.28D10:00:00;2020.03.29D12:00:00;00:05:00)]\";`hdb] // Custom Queries .gw.syncexec[\"select from exchange where date=2020.03.29, exchange in `finex`okex\";`hdb] .gw.syncexec[\"select avg bid, avg ask by 60 xbar time.minute, exchange from exchange_top where date=2020.03.30\";`hdb] Additional Information: It is important to note that using syncexec to execute these inbuilt functions across the RDB and HDB simultaneously may not always produce logical results. This is because syncexec runs the function independently on each processes and will raze the results.","title":"Gateway"},{"location":"gateway/#gateway","text":"We recommend executing the previously discussed database functions through the gateway processes to avail of query routing and load balancing. Full gateway functionality is discussed here . To use, connect to the gateway from q process, qcon or from an IDE. An example is shown below running from an IDE. Example queries are listed below. // OHLC .gw.syncexec[(`ohlc;`date`sym`byexchange!(2020.03.29 2020.03.30;`ETHUSDT;1b));`hdb] .gw.syncexec[\"ohlc[`date`sym`byexchange!(2020.03.29 2020.03.30;`ETHUSDT;1b)]\";`hdb] .gw.syncexec[\"ohlc[`exchanges`sym`byexchange!(`okex`huobi`finex;`ETHUSDT`BTCUSDT;1b)]\";`rdb] .gw.syncexec[\"ohlc[`exchanges`sym`byexchange`quote!(`okex`huobi`finex;`ETHUSDT`BTCUSDT;1b;`bid)]\";`hdb] .gw.syncexec[\"ohlc[`date`sym`exchanges`quote!(2020.05.09 2020.03.29 2020.03.30;`BTCUSDT;`;`ask)]\";`hdb`rdb] .gw.syncexec[\"ohlc[`date`sym`exchanges`quote`byexchange!(2020.05.09 2020.03.29 2020.03.30;`BTCUSDT;`finex`okex`zb;`bid;1b)]\";`hdb`rdb] // Orderbook .gw.syncexec[\"orderbook[`sym`exchanges!(`ETHUSDT;`)]\";`rdb] .gw.syncexec[\"orderbook[`sym`timestamp!(`BTCUSDT;2020.03.29D14:30:00.000000000)]\";`hdb] .gw.syncexec[\"orderbook[`sym`timestamp!(`ETHUSDT;2020.05.09D10:30:00.000000000)]\";`rdb] .gw.syncexec[\"orderbook[`sym`timestamp`exchanges`window!(`ETHUSDT;2020.03.29D15:00:00.000000000;`huobi`bhex;00:02:00)]\";`hdb] .gw.syncexec[\"orderbook[`sym`timestamp`exchanges`window!(`BTCUSDT;2020.03.29D15:00:00.000000000;`finex`okex`zb;00:01:00)]\";`hdb] // Top of Book .gw.syncexec[\"topofbook[`sym`exchanges!(`ETHUSDT;`)]\";`rdb] .gw.syncexec[\"topofbook[`sym`starttime`bucket!(`BTCUSDT;2020.05.09D10:00:00;00:05:00)]\";`rdb] .gw.syncexec[\"topofbook[`sym`starttime`endtime!(`BTCUSDT;2020.03.29D14:00:00;2020.03.29D17:00:00)]\";`hdb] .gw.syncexec[\"topofbook[`sym`exchanges`starttime`endtime!(`ETHUSDT;`zb`huobi;2020.03.29D15:00:00;2020.03.29D15:05:00)]\";`hdb] .gw.syncexec[\"topofbook[`sym`exchanges`starttime`endtime`bucket!(`ETHUSDT;`okex`finex`zb;2020.03.28D10:00:00;2020.03.29D12:00:00;00:05:00)]\";`hdb] // Arbitrage .gw.syncexec[\"arbitrage[`sym`exchanges!(`ETHUSDT;`)]\";`rdb] .gw.syncexec[\"arbitrage[`sym`starttime`bucket!(`BTCUSDT;2020.05.09D10:00:00;00:05:00)]\";`rdb] .gw.syncexec[\"arbitrage[`sym`starttime`endtime!(`BTCUSDT;2020.03.29D14:00:00;2020.03.29D17:00:00)]\";`hdb] .gw.syncexec[\"arbitrage[`sym`exchanges`starttime`endtime!(`ETHUSDT;`zb`huobi;2020.03.29D15:00:00;2020.03.29D15:05:00)]\";`hdb] .gw.syncexec[\"arbitrage[`sym`exchanges`starttime`endtime`bucket!(`ETHUSDT;`okex`finex`zb;2020.03.28D10:00:00;2020.03.29D12:00:00;00:05:00)]\";`hdb] // Custom Queries .gw.syncexec[\"select from exchange where date=2020.03.29, exchange in `finex`okex\";`hdb] .gw.syncexec[\"select avg bid, avg ask by 60 xbar time.minute, exchange from exchange_top where date=2020.03.30\";`hdb]","title":"Gateway"},{"location":"gateway/#additional-information","text":"It is important to note that using syncexec to execute these inbuilt functions across the RDB and HDB simultaneously may not always produce logical results. This is because syncexec runs the function independently on each processes and will raze the results.","title":"Additional Information:"},{"location":"gettingstarted/","text":"Getting Started Installation Download and install kdb+ from Kx Systems Download the main TorQ codebase from here Download TorQ Crypto from here Place the Crypto package over the top of the main TorQ package Example Linux Installation: ~/crypto:cross@homer$ git clone https://github.com/AquaQAnalytics/TorQ.git ~/crypto:cross@homer$ git clone https://github.com/AquaQAnalytics/TorQ-Crypto.git ~/crypto:cross@homer$ mkdir deploy ~/crypto:cross@homer$ cp -r TorQ/* deploy/ ~/crypto:cross@homer$ cp -r TorQ-Crypto/* deploy/ ~/crypto:cross@homer$ ls deploy/ appconfig aquaq-torq-brochure.pdf code config database.q datadog docs hdb html lib LICENSE logs mkdocs.yml monit README.md setenv.sh tests torq.q torq.sh Start-up After specifying your sever in config/process.csv and KDB base port in setenv.sh. You can set your environment variables and run the start script. ~/crypto/deploy:cross@homer$ . setenv.sh ~/crypto/deploy:cross@homer$ . torq.sh start all ~/crypto/deploy:cross@homer$ . torq.sh summary TIME | PROCESS | STATUS | PID | PORT 14:27:46 | discovery1 | up | 7187 | 46001 14:27:47 | tickerplant1 | up | 7289 | 46000 14:27:47 | rdb1 | up | 7388 | 46002 14:27:47 | hdb1 | up | 7493 | 46003 14:27:47 | hdb2 | up | 7594 | 46004 14:27:47 | wdb1 | up | 7704 | 46005 14:27:47 | sort1 | up | 7807 | 46006 14:27:47 | gateway1 | up | 7909 | 46007 14:27:48 | monitor1 | up | 8011 | 46009 14:27:48 | housekeeping1 | up | 8112 | 46011 14:27:48 | reporter1 | up | 8215 | 46012 14:27:48 | chainedtp1 | up | 8321 | 46014 14:27:48 | sortslave1 | up | 8420 | 46015 14:27:49 | sortslave2 | up | 8523 | 46016 14:27:49 | finexfeed1 | up | 8624 | 46017 14:27:49 | okexfeed1 | up | 8725 | 46018 14:27:49 | zbfeed1 | up | 8827 | 46019 14:27:49 | huobifeed1 | up | 8932 | 46020 14:27:49 | bhexfeed1 | up | 9035 | 46021 The stack can be stopped by running . torq.sh stop all TorQ Debug Mode It is straight forward to run processes in debug mode with TorQ as show below. After starting you stack you should see the tables in the RDB beginning to populate: ~/crypto/deploy:cross@homer$ . torq.sh stop rdb1 ~/crypto/deploy:cross@homer$ . torq.sh debug rdb1 q)tables[]!count each `. tables[] bhex | 10 exchange | 50 exchange_top| 50 finex | 10 huobi | 10 okex | 10 zb | 10 We have also included HDB partitions from 2020.03.29 and 2020.03.30 when the feeds where subscribed to Bitcoin and Ethereum. ~/crypto/deploy:cross@homer$ . torq.sh stop hdb1 ~/crypto/deploy:cross@homer$ . torq.sh debug hdb1 q)tables[]!count each `. tables[] bhex | 10722 exchange | 53836 exchange_top| 53723 finex | 10054 okex | 11250 zb | 10644 q)select count i by date, sym from exchange_top date sym | x ------------------| ----- 2020.03.29 BTCUSDT| 13378 2020.03.29 ETHUSDT| 13363 2020.03.30 BTCUSDT| 13495 2020.03.30 ETHUSDT| 13487 File Structure: |-- LICENSE |-- README.md |-- appconfig | |-- passwords | | |-- accesslist.txt | | |-- bhexfeed.txt | | |-- finexfeed.txt | | |-- huobifeed.txt | | |-- okexfeed.txt | | `-- zbfeed.txt | |-- settings | | |-- bhexfeed.q | | |-- chainedtp.q | | |-- compression.q | | |-- default.q | | |-- finexfeed.q | | |-- gateway.q | | |-- huobifeed.q | | |-- killtick.q | | |-- monitor.q | | |-- okexfeed.q | | |-- rdb.q | | |-- sort.q | | |-- tickerplant.q | | |-- wdb.q | | `-- zbfeed.q | |-- application.txt | |-- compressionconfig.csv | |-- dependency.csv | |-- housekeeping.csv | |-- process.csv | |-- reporter.csv | |-- symconfig.csv | `-- symmap.csv |-- code | |-- cryptofeed | | `-- cryptofeed.q | |-- cryptofunctions | | `-- cryptolib.q | `-- processes | |-- bhexfeed.q | |-- finexfeed.q | |-- huobifeed.q | |-- okexfeed.q | `-- zbfeed.q |-- hdb/database <- example hdb data | |--2020.03.29 | |--2020.03.30 | `-- sym |-- database.q `-- setenv.sh <- set environment variables |-- LICENSE |-- README.md |-- appconfig | |-- passwords | | |-- accesslist.txt | | |-- bhexfeed.txt | | |-- finexfeed.txt | | |-- huobifeed.txt | | |-- okexfeed.txt | | `-- zbfeed.txt | |-- settings | | |-- bhexfeed.q | | |-- chainedtp.q | | |-- compression.q | | |-- default.q | | |-- finexfeed.q | | |-- gateway.q | | |-- huobifeed.q | | |-- killtick.q | | |-- monitor.q | | |-- okexfeed.q | | |-- rdb.q | | |-- sort.q | | |-- tickerplant.q | | |-- wdb.q | | `-- zbfeed.q | |-- application.txt | |-- compressionconfig.csv | |-- dependency.csv | |-- housekeeping.csv | |-- process.csv | |-- reporter.csv | |-- symconfig.csv | `-- symmap.csv |-- code | |-- cryptofeed | | `-- cryptofeed.q | |-- cryptofunctions | | `-- cryptolib.q | `-- processes | |-- bhexfeed.q | |-- finexfeed.q | |-- huobifeed.q | |-- okexfeed.q | `-- zbfeed.q |-- hdb/database <- example hdb data | |--2020.03.29 | |--2020.03.30 | `-- sym |-- database.q The package consists of: fully configurable cyptocurrency exchange feed handlers a slightly modified version of kdb+tick from Kx Systems an example set of historic data configuration changes for base TorQ functions for data analysis to run on the RDB and HDB start and stop scripts Make It Your Own This system is production ready. Users may customize what currencies are subscribed to, the rate of data retrieval and even add new feed handlers!","title":"Getting Started"},{"location":"gettingstarted/#getting-started","text":"","title":"Getting Started"},{"location":"gettingstarted/#installation","text":"Download and install kdb+ from Kx Systems Download the main TorQ codebase from here Download TorQ Crypto from here Place the Crypto package over the top of the main TorQ package","title":"Installation"},{"location":"gettingstarted/#example-linux-installation","text":"~/crypto:cross@homer$ git clone https://github.com/AquaQAnalytics/TorQ.git ~/crypto:cross@homer$ git clone https://github.com/AquaQAnalytics/TorQ-Crypto.git ~/crypto:cross@homer$ mkdir deploy ~/crypto:cross@homer$ cp -r TorQ/* deploy/ ~/crypto:cross@homer$ cp -r TorQ-Crypto/* deploy/ ~/crypto:cross@homer$ ls deploy/ appconfig aquaq-torq-brochure.pdf code config database.q datadog docs hdb html lib LICENSE logs mkdocs.yml monit README.md setenv.sh tests torq.q torq.sh","title":"Example Linux Installation:"},{"location":"gettingstarted/#start-up","text":"After specifying your sever in config/process.csv and KDB base port in setenv.sh. You can set your environment variables and run the start script. ~/crypto/deploy:cross@homer$ . setenv.sh ~/crypto/deploy:cross@homer$ . torq.sh start all ~/crypto/deploy:cross@homer$ . torq.sh summary TIME | PROCESS | STATUS | PID | PORT 14:27:46 | discovery1 | up | 7187 | 46001 14:27:47 | tickerplant1 | up | 7289 | 46000 14:27:47 | rdb1 | up | 7388 | 46002 14:27:47 | hdb1 | up | 7493 | 46003 14:27:47 | hdb2 | up | 7594 | 46004 14:27:47 | wdb1 | up | 7704 | 46005 14:27:47 | sort1 | up | 7807 | 46006 14:27:47 | gateway1 | up | 7909 | 46007 14:27:48 | monitor1 | up | 8011 | 46009 14:27:48 | housekeeping1 | up | 8112 | 46011 14:27:48 | reporter1 | up | 8215 | 46012 14:27:48 | chainedtp1 | up | 8321 | 46014 14:27:48 | sortslave1 | up | 8420 | 46015 14:27:49 | sortslave2 | up | 8523 | 46016 14:27:49 | finexfeed1 | up | 8624 | 46017 14:27:49 | okexfeed1 | up | 8725 | 46018 14:27:49 | zbfeed1 | up | 8827 | 46019 14:27:49 | huobifeed1 | up | 8932 | 46020 14:27:49 | bhexfeed1 | up | 9035 | 46021 The stack can be stopped by running . torq.sh stop all","title":"Start-up"},{"location":"gettingstarted/#torq-debug-mode","text":"It is straight forward to run processes in debug mode with TorQ as show below. After starting you stack you should see the tables in the RDB beginning to populate: ~/crypto/deploy:cross@homer$ . torq.sh stop rdb1 ~/crypto/deploy:cross@homer$ . torq.sh debug rdb1 q)tables[]!count each `. tables[] bhex | 10 exchange | 50 exchange_top| 50 finex | 10 huobi | 10 okex | 10 zb | 10 We have also included HDB partitions from 2020.03.29 and 2020.03.30 when the feeds where subscribed to Bitcoin and Ethereum. ~/crypto/deploy:cross@homer$ . torq.sh stop hdb1 ~/crypto/deploy:cross@homer$ . torq.sh debug hdb1 q)tables[]!count each `. tables[] bhex | 10722 exchange | 53836 exchange_top| 53723 finex | 10054 okex | 11250 zb | 10644 q)select count i by date, sym from exchange_top date sym | x ------------------| ----- 2020.03.29 BTCUSDT| 13378 2020.03.29 ETHUSDT| 13363 2020.03.30 BTCUSDT| 13495 2020.03.30 ETHUSDT| 13487","title":"TorQ Debug Mode"},{"location":"gettingstarted/#file-structure","text":"|-- LICENSE |-- README.md |-- appconfig | |-- passwords | | |-- accesslist.txt | | |-- bhexfeed.txt | | |-- finexfeed.txt | | |-- huobifeed.txt | | |-- okexfeed.txt | | `-- zbfeed.txt | |-- settings | | |-- bhexfeed.q | | |-- chainedtp.q | | |-- compression.q | | |-- default.q | | |-- finexfeed.q | | |-- gateway.q | | |-- huobifeed.q | | |-- killtick.q | | |-- monitor.q | | |-- okexfeed.q | | |-- rdb.q | | |-- sort.q | | |-- tickerplant.q | | |-- wdb.q | | `-- zbfeed.q | |-- application.txt | |-- compressionconfig.csv | |-- dependency.csv | |-- housekeeping.csv | |-- process.csv | |-- reporter.csv | |-- symconfig.csv | `-- symmap.csv |-- code | |-- cryptofeed | | `-- cryptofeed.q | |-- cryptofunctions | | `-- cryptolib.q | `-- processes | |-- bhexfeed.q | |-- finexfeed.q | |-- huobifeed.q | |-- okexfeed.q | `-- zbfeed.q |-- hdb/database <- example hdb data | |--2020.03.29 | |--2020.03.30 | `-- sym |-- database.q `-- setenv.sh <- set environment variables |-- LICENSE |-- README.md |-- appconfig | |-- passwords | | |-- accesslist.txt | | |-- bhexfeed.txt | | |-- finexfeed.txt | | |-- huobifeed.txt | | |-- okexfeed.txt | | `-- zbfeed.txt | |-- settings | | |-- bhexfeed.q | | |-- chainedtp.q | | |-- compression.q | | |-- default.q | | |-- finexfeed.q | | |-- gateway.q | | |-- huobifeed.q | | |-- killtick.q | | |-- monitor.q | | |-- okexfeed.q | | |-- rdb.q | | |-- sort.q | | |-- tickerplant.q | | |-- wdb.q | | `-- zbfeed.q | |-- application.txt | |-- compressionconfig.csv | |-- dependency.csv | |-- housekeeping.csv | |-- process.csv | |-- reporter.csv | |-- symconfig.csv | `-- symmap.csv |-- code | |-- cryptofeed | | `-- cryptofeed.q | |-- cryptofunctions | | `-- cryptolib.q | `-- processes | |-- bhexfeed.q | |-- finexfeed.q | |-- huobifeed.q | |-- okexfeed.q | `-- zbfeed.q |-- hdb/database <- example hdb data | |--2020.03.29 | |--2020.03.30 | `-- sym |-- database.q The package consists of: fully configurable cyptocurrency exchange feed handlers a slightly modified version of kdb+tick from Kx Systems an example set of historic data configuration changes for base TorQ functions for data analysis to run on the RDB and HDB start and stop scripts","title":"File Structure:"},{"location":"gettingstarted/#make-it-your-own","text":"This system is production ready. Users may customize what currencies are subscribed to, the rate of data retrieval and even add new feed handlers!","title":"Make It Your Own"}]}